{"version":3,"sources":["component/Header.js","component/CustomSlider.js","hook/useWindowSize.js","component/MainChart.js","service/BarChartData.js","component/DataVisualisation.js","component/Loader.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Array","from","keys","map","item","key","iOSBoxShadow","marks","value","useStyles","makeStyles","root","color","action","height","padding","width","thumb","backgroundColor","boxShadow","marginTop","marginLeft","active","valueLabel","left","top","background","track","rail","opacity","mark","markActive","CustomSlider","setValue","styles","style","marginBottom","label","Slider","classes","defaultValue","onChange","event","newValue","aria-label","valueLabelDisplay","useWindowSize","useState","undefined","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","defaults","font","family","size","options","plugins","legend","display","position","labels","MainChart","datasets","chartRef","playRef","length","ref","reference","current","data","updateBarChartData","actions","alreadyAddedLabels","dataset","filter","includes","forEach","push","barThickness","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","find","DataVisualisation","useRef","activeActions","handleActionValueChange","activeAction","filteredAction","config","sort","a","b","update","marginRight","App","loaded","setLoaded","setInterval","Loader","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79d55892.chunk.js","sourcesContent":["const Header = () => (\n    <div className=\"slider-wrapper\">\n        <div className=\"slider\">\n            {Array.from(Array(100).keys()).map((item, key) => (\n                <div key={key} className={\"slider-item\"}> Collapse non merci ! </div>\n            ))}\n        </div>\n    </div>\n\n)\n\nexport default Header;","import React from 'react';\nimport Slider from '@material-ui/core/Slider';\nimport { makeStyles } from '@material-ui/core';\n\nconst iOSBoxShadow =\n    '0 3px 1px rgba(0,0,0,0.1),0 4px 8px rgba(0,0,0,0.13),0 0 0 1px rgba(0,0,0,0.02)';\n\nconst marks = [\n    {\n        value: 0,\n    },\n    {\n        value: 25,\n    },\n    {\n        value: 50,\n    },\n    {\n        value: 75,\n    },\n    {\n        value: 100,\n    },\n];\n\nconst useStyles = makeStyles({\n    root: {\n        color: action => action.color,\n        height: 2,\n        padding: '15px 0',\n        width: 200\n    },\n    thumb: {\n        height: 28,\n        width: 28,\n        backgroundColor: '#fff',\n        boxShadow: iOSBoxShadow,\n        marginTop: -14,\n        marginLeft: -14,\n        '&:focus, &:hover, &$active': {\n            boxShadow: '0 3px 1px rgba(0,0,0,0.1),0 4px 8px rgba(0,0,0,0.3),0 0 0 1px rgba(0,0,0,0.02)',\n            // Reset on touch devices, it doesn't add specificity\n            '@media (hover: none)': {\n                boxShadow: iOSBoxShadow,\n            },\n        },\n    },\n    active: {},\n    valueLabel: {\n        left: 'calc(-50% + 12px)',\n        top: -18,\n        '& *': {\n            background: 'rgba(255,255,255, 0)',\n            color: '#000',\n        },\n    },\n    track: {\n        height: 2,\n    },\n    rail: {\n        height: 2,\n        opacity: 0.5,\n        backgroundColor: '#bfbfbf',\n    },\n    mark: {\n        backgroundColor: '#bfbfbf',\n        height: 8,\n        width: 1,\n        marginTop: -3,\n    },\n    markActive: {\n        opacity: 1,\n        backgroundColor: 'currentColor',\n    },\n});\n\nexport default function CustomSlider({value, setValue, action}) {\n\n    const handleChange = (event, newValue) => {\n        setValue(action, newValue);\n    };\n\n    const styles = useStyles(action);\n\n    return (\n        <div style={{marginBottom: '2rem'}}>\n            <div style={{marginBottom: '1.5rem'}}>{action.label}</div>\n            <Slider\n                classes={styles}\n                defaultValue={value}\n                onChange={handleChange}\n                aria-label=\"ios slider\"\n                marks={marks}\n                valueLabelDisplay=\"on\" />\n        </div>\n    );\n}\n","import {useEffect, useState} from \"react\";\n\nfunction useWindowSize() {\n    // Initialize state with undefined width/height so server and client renders match\n    // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n    const [windowSize, setWindowSize] = useState({\n        width: undefined,\n        height: undefined,\n    });\n    useEffect(() => {\n        // Handler to call on window resize\n        function handleResize() {\n            // Set window width/height to state\n            setWindowSize({\n                width: window.innerWidth,\n                height: window.innerHeight,\n            });\n        }\n        // Add event listener\n        window.addEventListener(\"resize\", handleResize);\n        // Call handler right away so state gets updated with initial window size\n        handleResize();\n        // Remove event listener on cleanup\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, []); // Empty array ensures that effect is only run on mount\n    return windowSize;\n}\nexport default useWindowSize","\nimport React from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { defaults } from 'react-chartjs-2';\nimport useWindowSize from \"../hook/useWindowSize\";\n\ndefaults.font.family = 'mattoneregular';\ndefaults.font.size = 18;\n\nconst options = {\n    plugins: {\n        legend: {\n            display: false,\n            position: 'bottom',\n            labels: {\n                font: {\n                    size: 40,\n                }\n            }\n        },\n    },\n}\n\nconst MainChart = ({ datasets, chartRef, playRef }) => {\n    const size = useWindowSize();\n\n    if (size.width < 992) {\n        defaults.font.size = 12;\n    }\n\n    if (size.width < 492) {\n        defaults.font.size = 8;\n    }\n\n    return (\n        <div className={\"main-chart-wrapper\"}>\n            {datasets.length === 0 &&\n                <div\n                    ref={(reference) => {if (reference !== null) {playRef.current = reference}}}\n                    className={\"play\"}>\n                        Jouez avec les options <br/>\n                    <div className={\"text-center arrow-wrapper\"}><span className=\"arrow arrow-bar is-bottom\"></span></div>\n                </div>\n            }\n            <Bar\n                ref={(reference) => {if (reference !== null) {chartRef.current = reference} }}\n                data={{\n                    labels: ['Empreinte carbone'],\n                    datasets: datasets\n                }}\n                options={options}\n            />\n        </div>\n    )\n};\n\nexport default MainChart;","const updateBarChartData = (data, actions) => {\n    let alreadyAddedLabels = data.datasets.map((dataset) => dataset.label[0])\n\n    if (alreadyAddedLabels.length !== actions.length && actions.length > alreadyAddedLabels.length) {\n        const actionsToAdd = actions.filter((action) => {\n            return !alreadyAddedLabels.includes(action.label)\n        })\n\n        actionsToAdd.forEach((action) => {\n            alreadyAddedLabels.push(action.label)\n            data.datasets.push({\n                barThickness : 50,\n                label: [action.label],\n                backgroundColor: [action.color],\n                borderColor: 'transparent',\n                borderWidth: 5,\n                hoverBackgroundColor: [action.color],\n                hoverBorderColor: [action.color],\n                data: [action.value],\n            })\n        })\n\n        return;\n    }\n\n    if (alreadyAddedLabels.length === actions.length) {\n        data.datasets.find((dataset) => {\n            return actions.forEach((action) => {\n                if (action.value !== dataset.data[0] && action.label === dataset.label[0]) {\n                    dataset.data[0] = action.value\n                    return true;\n                }\n                return false\n            })\n        })\n    }\n}\n\nexport default updateBarChartData;\n","\nimport React, {useRef} from 'react';\nimport CustomSlider from \"./CustomSlider\";\nimport MainChart from \"./MainChart\";\nimport updateBarChartData from \"../service/BarChartData\";\n\nconst DataVisualisation = ({ actions }) => {\n    const chartRef = useRef(null);\n    const playRef = useRef(null);\n    let activeActions = [];\n\n    const handleActionValueChange = (action, newValue) => {\n        let activeAction = activeActions.filter((filteredAction) => filteredAction.label === action.label);\n        if (activeAction.length === 0) {\n            activeAction = {...action};\n        } else {\n            activeAction = activeAction[0];\n        }\n\n        activeAction.value = action.value * newValue;\n        activeActions = [\n            ...activeActions.filter((filteredAction) => (filteredAction.label !== action.label)),\n            activeAction\n        ];\n\n        updateBarChartData(chartRef.current.config.data, activeActions)\n        chartRef.current.config.data.datasets = chartRef.current.config.data.datasets.sort((a, b) => {\n            return b.data[0] - a.data[0];\n        });\n\n        if (playRef.current.style.display !== 'none') {\n            playRef.current.style.display = 'none'\n        }\n        chartRef.current.update();\n    }\n\n    return (\n        <>\n            <MainChart playRef={playRef} chartRef={chartRef} datasets={[]}/>\n\n            <div className=\"d-flex input-sliders-wrapper\">\n                {actions.map((action, key) => (\n                    <div style={{marginRight: '1.5rem'}} key={key}>\n                        <CustomSlider action={action} value={action.value} setValue={handleActionValueChange}/>\n                    </div>\n                ))}\n            </div>\n        </>\n    )\n};\n\nexport default DataVisualisation;","const Header = () => (\n    <div className={\"loader\"}>\n        <div className=\"slider-wrapper\">\n            <div className=\"slider\">\n                {Array.from(Array(100).keys()).map((item, key) => (\n                    <div key={key} className={\"slider-item\"}>:)</div>\n                ))}\n            </div>\n        </div>\n    </div>\n\n)\n\nexport default Header;","import './App.css';\nimport Header from \"./component/Header\";\nimport DataVisualisation from \"./component/DataVisualisation\";\nimport {useEffect, useState} from \"react\";\nimport Loader from \"./component/Loader\";\n\nconst actions = [\n    {\n        'label': 'Arrêter de manger de la viande',\n        'value': 40,\n        'color': 'rgb(255,103,0)'\n    },\n    {\n        'label': 'Se déplacer à cheval',\n        'value': 30,\n        'color': 'rgb(128,0,255, 1)'\n    },\n    {\n        'label': 'Pipi sous la douche',\n        'value': 2,\n        'color': 'rgb(255,250,0)'\n    },\n    {\n        'label': 'Trier ses déchets',\n        'value': 10,\n        'color': 'rgb(44,187,12)'\n    },\n    {\n        'label': 'Manger un riche',\n        'value': 100,\n        'color': 'rgb(218,0,255)'\n    }\n]\n\nfunction App() {\n  const [loaded, setLoaded] = useState(false);\n\n  useEffect(() => {\n      setInterval(() => {setLoaded(true)}, 1000)\n  }, [])\n  return (\n    <div className=\"App\">\n        {!loaded &&\n            <Loader/>\n        }\n        <>\n            <Header/>\n            <DataVisualisation actions={actions}/>\n        </>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}